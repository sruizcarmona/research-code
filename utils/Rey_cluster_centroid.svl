// REYNOLDS CLUSTERING METHOD (FAST ALGORTIHM FOR CLUSTERING)
// CAN BE CALLED FROM GRAPHIC INTERFACE:
//    File -> Open -> Select this file -> Run SVL
// OR FROM MOEBATCH:
//    moebatch -exec "ReyClus['file.mdb','FP:GpiDAPH3','tanimoto',[sim:0.80,cfield:'CLUSTER80_8F7B']]" >>&! messages
#set title	'Clustering by Reynolds method'
#set class	'MOE:fingerprint'
#set version	'XB 2005'
#set main	'dbv_ReyClus'

function ph4_ValidateFingerprint;
function ph4_FingerprintChooser;
function ph4_FingerprintMDB;
function ph4_SimilarityMDB;
function QuaSAR_DescriptorMDB;

const DEFAULT_PARAMS = [
    sim:	0.85,			// % similarity overlap threshold
    cfield:	'$CLUSTER',		// cluster fieldname
    esel:	0,			// 0 = all; 1 = selected entries only
    mfield:	''			// molecule field for clustering
];

global function ReyClus [filename,fp_code,fp_sim,options]
    local i, j;
    local msg = 0;

	// if there are no options, prompt for them; then add in the
	// defaults, strip the duplicates and print the command
	// needed to start us up again

    options = cat [options, DEFAULT_PARAMS];
    options = options[pack indexof [tags DEFAULT_PARAMS, tags options]];

    write ['ReyClus [\'{}\',{},{},', filename, fp_code, fp_sim ];
    print options;
    write ']\n';
    write ['{}\n', token asctime[]];

	// open up the database file and determine the molecule field.  Then,
	// make sure that the cluster code field exists.  If there is no
	// molecule field with the selected fingerprint then calculate it.

    local dbkey = db_Open filename;
    local src_n = db_nEntries dbkey;
    local src_mfield = options.mfield;
    local [fieldnames,fieldtypes] = db_Fields dbkey;
// define set of entries to be used
    if options.esel==1 then 
      local entries=db_Entries dbkey|dbv_EntrySelection[dbkey,[]]==1;
    else
      entries=db_Entries dbkey;
    endif

    if src_mfield == '' then
	src_mfield = db_FirstFieldType [dbkey, 'molecule'];
    endif

// Create fields for output
    if options.cfield <> '' then
	db_SetEnv [dbkey, options.cfield, ''];
	db_EnsureField [dbkey, options.cfield, 'char'];
	db_EnsureField [dbkey, token swrite['{}_ID',options.cfield], 'int'];
	db_EnsureField [dbkey, token swrite['{}_meansim_withincluster',options.cfield], 'float'];
	db_DeleteField [dbkey, token swrite['{}_Population',options.cfield]];
	db_EnsureField [dbkey, token swrite['{}_Population',options.cfield], 'int'];
    endif

// Calculate fingerprints if necessary
    if not indexof [fp_code, first db_Fields dbkey] then
	Close [force:MOE_BATCH];
	write 'fingerprints not in database...\n';
	ph4_FingerprintMDB [dbkey, src_mfield, fp_code, options.esel];
    endif

// Calculate MWeight if necessary; define set of weight and fp to be used
   if options.cfield <> '' then
      if add m_findmatch['Weight',fieldnames]<1 then 
	QuaSAR_DescriptorMDB [db_Filename dbkey, src_mfield, 'Weight'];
      endif
      if options.esel==1 then 
        local weight=db_ReadColumn [ dbkey, 'Weight' ]|dbv_EntrySelection[dbkey,[]]==1;
        local fp=db_ReadColumn [ dbkey, fp_code ]|dbv_EntrySelection[dbkey,[]]==1;
      else 
        weight=db_ReadColumn [ dbkey, 'Weight' ];
        fp=db_ReadColumn [ dbkey, fp_code ];
      endif

// unselect everything
      apt dbv_EntrySetSelected [ dbkey, entries, 0 ];

// sort by MWeight
      local i_sort =x_sort weight;
      entries=entries[i_sort];
      fp=fp[i_sort];
      local eprobe=[];
      local fpprobe=[];

// Select first (lowest MW) entry
      dbv_EntrySetSelected [ dbkey, entries(1), 1 ];

      local ind=1;
      eprobe =cat[eprobe,entries(ind)];
      fpprobe =cat[fpprobe,[fp(ind)]];
      local mask0=entries==entries(ind);
      entries=entries|not mask0;
      fp=fp|not mask0;
//Validate the fingerprint/metric and return the associated functions to calculate these quantities
      local [fp_fcn, sim_fcn] = ph4_ValidateFingerprint [fp_code, fp_sim];

// Start by identifying all probes:
// loop over entries
i=1;
while i<=(length entries) loop
	
	j=length eprobe;local xid=0;
// loop over probes	
	while j> 0 loop
// calculate similarity between probe and remaining entries
		local sim= call [sim_fcn, [cat fpprobe(j),cat fp(i)]];
//write['{}*{}\t', sim,j];
// if meets the similarity treshold, break the loop
		if sim>=options.sim then
			j=-10;
		else
			j=j-1;
		endif
	endloop
//write ['{}\n',j];
// if haven't met the sim treshold, it will become a new probe
	if (j<>-10) then 
		dbv_EntrySetSelected [ dbkey, entries(i), 1 ];
		eprobe=cat[eprobe,entries(i)];
		fpprobe=cat[fpprobe,[fp(i)]];
		local mask=(igen length entries)|((igen length entries)<> i);
		entries=entries[mask];
		fp=fp[mask];
	else
		i=i+1;
	endif
	write['{}\t{}\t{}\t{}\t{}\t{}\n', i,length eprobe,length fpprobe,length entries,sim,j];
endloop

local Probeid=rep[[],length eprobe];
local Probeidint=rep[[],length eprobe];

// write stuff for probes in DB
for i = 1, length eprobe loop
	local zero=cat [rep["0",8],swrite['{n:.100000000}', i]];
	zero=keep[zero,-8];
	Probeid(i)=swrite['CLUSTER_{n:}_PROBE_',zero];
	Probeidint(i)=i;
	local val=tag[options.cfield,[swrite['CLUSTER_{n:}_PROBE_',zero]]];
	db_Write [dbkey, eprobe(i), val];
	val=tag[token swrite['{}_ID',options.cfield], Probeidint(i)];
	db_Write [dbkey, eprobe(i), val];
endloop


local ent_per_probe=rep[[],length eprobe];
write['Attribute cluster membership for non-probes: \t'];
local fp_per_probe=rep[[],length eprobe];

// Attribute cluster membership to non-probes
for i = 1, length entries loop
	write['{}\t',i];
	local Clusterid=[];
	local simid=[];
	for j=1,length eprobe loop
		sim= call [sim_fcn, [cat fpprobe(j),cat fp(i)]];
		if sim>=options.sim then
			Clusterid=cat [Clusterid,db_ReadFields [ dbkey, eprobe(j),options.cfield]];
			simid=cat [simid,sim];
		endif
	endloop
	local ind2=indexof[max simid,simid];
	local ind3=indexof[[Clusterid(ind2)],Probeid];
	ent_per_probe(ind3)=cat [ent_per_probe(ind3),entries(i)];
	fp_per_probe(ind3)=cat [fp_per_probe(ind3),[fp(i)]];
	//print swrite['{}MEMBER_{}',drop[Clusterid(ind2),-1],simid(ind2)];
	val=tag[options.cfield,[swrite['{}MEMBER_{}',drop[ Clusterid(ind2),-1],simid(ind2)]]];
	db_Write [dbkey, entries(i), val];
	val=tag[token swrite['{}_ID',options.cfield],Probeidint(ind3)];
	db_Write [dbkey, entries(i), val];
endloop

//unselect everything
entries = db_Entries [dbkey];
apt dbv_EntrySetSelected [ dbkey, entries, 0 ];

write['\n Calculate intra-clusters similarities: \t'];

// Calculate intra-clusters similarities
for i = 1, length eprobe loop
	write['{}\t',i];
	if length ent_per_probe(i)>0 then 
		local cate=cat[eprobe(i),ent_per_probe(i)];
		local catfp=cat[[fpprobe(i)],fp_per_probe(i)];
		local catsim=rep[0,length cate];//cat[eprobe(i),ent_per_probe(i)];
		for j=1,length cate loop
			local k;
			local ccate=cate[igen length cate|(igen length cate<> j)];
			local ccatfp=catfp[igen length cate|(igen length cate<> j)];
			sim=0;
			for k=1,length ccate loop
				sim= sim+(call [sim_fcn, [cat catfp(j),cat ccatfp(k)]]);
			endloop
			catsim(j)=sim/length ccate;
			val=tag[token swrite['{}_meansim_withincluster',options.cfield],sim/length ccate];
			db_Write [dbkey, cate(j), val];        
		endloop
		local indc=indexof[max catsim,catsim];
		local cval=db_ReadFields [ dbkey, cate(indc), options.cfield ] ;
		cval=swrite['{}_CENTROID',cval];
		val=tag[options.cfield,[cval]];
		print cval;
//print val;
		db_Write [dbkey, cate(indc), val];
		val=tag[token swrite['{}_Population',options.cfield],add[length ent_per_probe(i),1]];
		db_Write [dbkey, cate(indc), val];        
//select centroid
		dbv_EntrySetSelected [ dbkey, cate(indc), 1 ];
	else 
		val=tag[token swrite['{}_meansim_withincluster',options.cfield],1];
		db_Write [dbkey, eprobe(i), val];
        	cval=db_ReadFields [ dbkey, eprobe(i), options.cfield ] ;
        	cval=swrite['{}_CENTROID',cval];
        	val=tag[options.cfield,[cval]];
        	db_Write [dbkey, eprobe(i), val];
		val=tag[token swrite['{}_Population',options.cfield],add[length ent_per_probe(i),1]];
		db_Write [dbkey, eprobe(i), val];        
//select centroid
		dbv_EntrySetSelected [ dbkey, eprobe(i), 1 ];
	endif
endloop

write['\n'];
for i = 1, length eprobe loop
	write['Cluster \t{}\tcontains\t{}\tmembers\n',Probeid(i),length ent_per_probe(i)];
endloop
	
endif // comes from line 72

// close all of our files and get out...

write ['\n{}\n', token asctime[]];
write ['ReyClus: done {}\n', db_Filename dbkey];

local nbperclu=app length ent_per_probe;nbperclu=inc nbperclu;
write['\n\n**********Summary********** \nnb of clusters:{}\nmax pop per cluster:{}\nmean pop per cluster:{}\nmin pop per cluster:{}\n***************************\n',length Probeid,(max nbperclu),(add nbperclu)/length nbperclu,(min nbperclu)];
	
db_Close dbkey;

endfunction

// ---------------------------- interface ------------------------------------

global function dbv_ReyClus filename
    if MOE_BATCH then return; endif

	// determine which database we'll use

    if filename === [] or filename === '' then
	filename = db_Filename db_View[];
    endif

    local mdb_filename = db_Filename filename;
    local [fname, ftype] = db_Fields mdb_filename;

	// create the window

    local wkey = WindowCreate [
	title: 'Reynolds Clustering Method', name: 'panel',
	options: ['OK','Set Fingerprint...','Cancel'],
	onTrigger: ['return','return','exit'],

	Text : [
	    name: 'file', title: 'Database:',
	    len: 40, extendH: 1, sensitive:0,
	    bubbleHelp: 'The database to operate upon.'
	],

	Checkbox : [
	    name: 'esel', text: 'Selected Entries Only',
	    bubbleHelp:
		'If checked then only selected entries in the database\n'
		'viewer will be used in the calculation.'
	],

	Option : [
	    name: 'mfield', title: 'Molecule:',
	    text: fname | ftype == 'molecule',
	    bubbleHelp:
		'The database field containing the molecules.  This is\n'
		'required if fingerprints have not already been calculated.'
	],

	Label : [
	    title: 'Fingerprint:', name: 'fptext', text: ' \n '
	],

	
	Scale : [
	    name: 'sim', title: 'Similarity Threshold:', range: [0,100,1], extendH: 1,
	    bubbleHelp:
		'The similarity threshold that is used to detect probes\n'
	
	],

	
	Text : [
	    name: 'cfield', title: 'Cluster Field:', len: 10,
	    bubbleHelp:
		'Cluster numbers will be written into the given field.\n'
		'If this field is empty then cluster numbers will not\n'
		'be written to the database.'
	]
    ];

    WindowSetData [wkey, DEFAULT_PARAMS];

    WindowSetData [wkey, [
	file:	mdb_filename,
	sim:	DEFAULT_PARAMS.sim * 100
    ]];

    static code, simcode, code_desc, sim_desc;
    [code, simcode, code_desc, sim_desc] = ph4_FingerprintChooser[];

    function set_fingerprint []
	local t = token swrite ['{} ({})\nMetric: {} ({})',
	    code_desc, code,
	    sim_desc, simcode
	];
	WindowSetAttr [wkey, [fptext: [text: t] ]];
    endfunction

    local v, trig;
    set_fingerprint[];
    WindowShow wkey;

    loop
	[v,trig] = WindowWait wkey;
	if trig === 'panel' then
	    if v.(trig) == 'OK' then
		break;
	    elseif v.(trig) == 'Set Fingerprint...' then
		if second task_fork [master:'parent', statics:'share'] == 'child' then
		    [code,simcode,code_desc,sim_desc] =
			ph4_FingerprintChooser ['Cluster', code, simcode]
		    ;
		    set_fingerprint[];
		    exit[];
		endif
	    elseif v.(trig) == 'Cancel' then
		exit[];
	    endif
	endif
    endloop

    WindowDestroy wkey;

    local opt = v | indexof [tags v, tags DEFAULT_PARAMS];
    opt.sim = opt.sim / 100;
    ReyClus [mdb_filename, code, simcode, opt];
endfunction
