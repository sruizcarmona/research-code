// READ A REFERENCE MOL FILE AND A SD FILE, and otputs RMSD (corrected by symmetry)
// IF ONLY 1 FILE IS PROVIDED, FIRST ENTRY IS THE REFERENCE
//
// LOAD & EXECUTE AS: (from moe)
//
//  smart_rms_moe ['ref.sdf', 'file.sdf']
//  smart_rms_moe ['file.sdf']
// 
// OR:
//  moebatch -load ~/smart_rms_moe.svl -exec "smart_rms_moe['ref.sdf','file.sdf']"
//  moebatch -load ~/smart_rms_moe.svl -exec "smart_rms_moe['file.sdf']"

#set main 'smart_rms_moe'

function ScanMDLFile;
function fread_MDLRecord;
function conf_ExpandAutomorphisms, conf_NormalizeAtoms, conf_DistanceMatrix;
function Superpose;
function AutoType;

// a & b contain coordinates in this format: [ [x1,x2,...],[y1,y2,...],[z1,z2,...] ]
local function my_msd [a,b]
	local msd = 0;
	local j;
	local xa = first a;
	local ya = second a;
	local za = third a;
	local xb = first b;
	local yb = second b;
	local zb = third b;
	local natom = length xa;
	//local rmsd;
	for j=1, natom loop
            msd = msd + ( sqr(xa[j] - xb[j]) + sqr(xa[j]- xb[j]) + sqr(xa[j]- xb[j]));
        endloop
	msd = msd / natom;
	return msd;
//	return msd;
endfunction

local function reorder_atoms [qmol, mol]
    mol = mol_Heavy mol;
    qmol = mol_Heavy qmol;

    local dm = dmatch_open [];

    local qdmat = conf_DistanceMatrix qmol(4)(MOL_ATOM_BONDS);
    local dmat  = conf_DistanceMatrix  mol(4)(MOL_ATOM_BONDS);

    dmatch_cdist [dm, qdmat, qdmat];
    dmatch_idist [dm, dmat];

    local atoms  = cat cAtoms mol_Create mol;
    local qatoms = cat cAtoms mol_Create qmol;
    app AutoType [atoms, qatoms];

    dmatch_cimap [dm, indicesof [aPrioZQH qatoms, aPrioZQH atoms]];
    oDestroy uniq aChain cat [atoms, qatoms];

    local xpos;

    while length (xpos = dmatch_nextmatch dm) loop
        local tmol = mol_aPermute [mol, xpos];
        if not (qmol(4)(MOL_ATOM_EL) === tmol(4)(MOL_ATOM_EL)) then
            continue;
        endif
        if not (qmol(4)(MOL_ATOM_GEOM) === tmol(4)(MOL_ATOM_GEOM)) then
            continue;
        endif
    until qmol(4)(MOL_ATOM_CHIRALITY) === tmol(4)(MOL_ATOM_CHIRALITY)
    endloop

    if not length xpos then             // no match!
//      return [[],[]];
        return mol;
    endif

    dmatch_close dm;

    return tmol;                        // permuted heavy atoms of mol
endfunction

global function smart_rms_moe[ref_file, file]

	oDestroy Chains[];

	if (ref_file === []) then
		write ['At least one filename should be provided\n'];
		
	endif

	if (file === []) then
		file = ref_file;
		write ['No reference file provided, using first entry of {} as reference\n', file];
		ref_file = [];
	else
		local type = ftype file;
		if (type <> 'file') then
			write ['File {} does not exists, using first entry of {} as reference\n', ref_file, file];
			file = ref_file;
			ref_file = [];
		endif
	endif

// Read reference structure

	local field_format, fnum_input;
	if (ref_file === []) then
		fnum_input = fopenr file;
		field_format = tag droplast ScanMDLFile [file,1];
	else
		fnum_input = fopenr ref_file;
		field_format = tag droplast ScanMDLFile [ref_file,1];
	endif
	local [mol, data_org] = fread_MDLRecord [fnum_input, field_format];
	fclose fnum_input;

	local atoms = cat cAtoms mol_Create mol;
	conf_NormalizeAtoms atoms;
	aSetForceRS [atoms, 0];
	local hatoms = atoms | aAtomicNumber atoms > 1;
	local ref_mol = mol_Extract hatoms;
	oDestroy uniq aChain atoms;

// Read SDF file, on entry at a time

	field_format = tag droplast ScanMDLFile [file,1];
	fnum_input = fopenr file;
	local v;
	local k = 0;
	while length (v = fread_MDLRecord [fnum_input, field_format]) loop
		k = inc k;
		[mol, data_org] = v;
		atoms = cat cAtoms mol_Create mol;
		conf_NormalizeAtoms atoms;
		aSetForceRS [atoms, 0];
		hatoms = atoms | aAtomicNumber atoms > 1;
		local my_mol = mol_Extract hatoms;
		oDestroy uniq aChain atoms;

		local pos_2 = mol_aPos ref_mol;
		local confs_2 = first conf_ExpandAutomorphisms [ref_mol, nest pos_2, 0];

// Calc RMSD
		my_mol = reorder_atoms [ref_mol, my_mol];
		local pos_1 = mol_aPos my_mol;
		local confs_1 = first conf_ExpandAutomorphisms [my_mol, nest pos_1, 0];
		
		local i, j, rmsds=[];
		for i=1, length confs_1 loop
			for j=1, length confs_2 loop
//				rmsds(i)(j) = first Superpose [ [confs_1(i), confs_2(j)] ];
				rmsds(i)(j) = my_msd [ confs_1(i), confs_2(j) ];
			endloop
		endloop
		local rmsd = sqrt min cat rmsds;
		write ['RMSD of entry {} = {}\n', k, rmsd];

	endloop   // end SD file

endfunction
