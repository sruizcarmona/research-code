#svl
#set title 'get_ligands'

// This script returns SD Files of ligands in the PDB that bind
// in the same site as a specified ligand

// Input:
//	1) a PDB code + a 3-letter ligand code (defines the ligand)
//	2) a list of PDB IDs to search for ligands

// Execution mode:
// moebatch -load get_ligands.svl -exec "get_ligands[PDB_ref,LIG,[PDB1,PDB2,...]]"
//
// EXAMPLE: get_ligands ['1YET','GDM',['1uyl','1uym','1uy6']]

function pro_Align;
function pro_ReadMDA;

// aligns based on sequence and returns identity ratio
local function identity [c1, c2]
   local proalign_seq = [
       enable_structural:0,
       sec_struct:'none',
       mda:'blosum62',
       gapstart:7,
       gapextend:1
   ];
    pro_Align [[c1,c2], proalign_seq];
    local rp = cAlignmentPositions [c1, c2];
    local rn = rName cResidues [c1, c2];
    local x= eqE apt get [ rn, apt indexof [[join rp], rp]];
    return (add x) / (length cat cResidues c1);
endfunction

global function get_ligands[ref,lig,list]

// Clear everything first
	oDestroy Chains[];
// set some vars
	const D_CUTOFF = 6.0;
	local tmpdir = 'tmp_pdb';
	local pdb_options = [
	    directory   : tmpdir,
//	    server_base : 'ftp://ftp.wwpdb.org/pub/pdb/',
	    readPDB     : 0,
	    uncompress  : 1,
	    overwrite   : 0,
	    confirm     : 0,
	    showPanel   : 0
	];
         local proalign_opt = [
            enable_structural:1,
            sec_struct:'actual',
            mda:'blosum62',
            gapstart:7,
            gapextend:1
        ];

	fmkdir tmpdir;
// set proper case:
	ref = tolower ref;
	lig = token toupper lig;
// read reference PDB file
	local status = second untag rcsb_download [ref,pdb_options];
	if status == 'failed' then
		write ['ATTENTION: Reference PDB file {} could not be downloaded - Must STOP\n',ref];
		exit[];
        endif
	local file = token swrite ['{}/{}.ent', tmpdir,ref];
	local ref_chains = ReadPDB file;
// keep only ligand and protein around it
	local lkey = first (Residues [] | rName Residues [] == lig);
	local aakeys = Residues [] | rIsAmino Residues [];
	rSetSelected [Residues[], one length Residues[]];	// select all
	rSetSelected [lkey, zero length lkey];			// deselect ligand
	rSetSelected [aakeys, zero length aakeys];		// deselect AA
	oDestroy [Residues [] | rSelected Residues[]];
	local alig = cat rAtoms lkey;
	local aprot = cat rAtoms aakeys;
// define active site:
	local prox = prox_open [D_CUTOFF, aPos aprot, 0];
	local ridx = second prox_find [prox, aPos alig, D_CUTOFF];
	prox_close prox;
	local isite = cat uniq ridx;
	local rsite = uniq aResidue aprot[isite];
	rSetSelected [rsite, one rsite];
	local csite = uniq rChain rsite;
	if (length csite <> 1) then
		write ['WARNING - The binding site should include only one chain, not {} - WARNING\n',length csite];
		local max = 0;
		local ctmp, cc;
		for cc in csite loop
			local ii = add eqE [rChain rsite, cc];
			if (ii > max) then 
				ctmp = cc;
				max = ii;
			endif
			write ['Chain {} has {} residues in the binding site\n',cName cc, ii];
		endloop;
		csite = ctmp;
		write ['Chain {} has the largest number of residues in the active site and will be used\n',cName csite];
//		exit[];
        endif
//delete empty chains
	oDestroy (Chains [] | app length cResidues Chains[] == 0);
// store ligand, site and protein in MDB
	local mdbkey = db_Open ['concurring_ligands.mdb', 'create'];
	db_EnsureField [mdbkey,'Ligand','molecule'];
	db_EnsureField [mdbkey,'Site','molecule'];
	db_EnsureField [mdbkey,'Chain','molecule'];
	db_EnsureField [mdbkey,'Ligand_ID','char'];
	db_EnsureField [mdbkey,'Chain_ID','char'];
	db_EnsureField [mdbkey,'PDB_ID','char'];
        local data = [	tag['Ligand',[mol_Extract lkey]],
			tag['Site',[mol_Extract rsite]],
			tag['Chain',[mol_Extract csite]],
			tag['Ligand_ID',[swrite [ '{c:}', rName lkey]]],
			tag['Chain_ID',[swrite [ '{c:}',cName csite]]],
			tag['PDB_ID',[swrite [ '{c:}', ref]]]
	];
        data  = cat data;
        db_Write [mdbkey, 0, data];
// Read each protein and save 
	local code;
	for code in list loop
		code = tolower code;
		status = second untag rcsb_download [code,pdb_options];
		if status == 'failed' then
			write ['WARNING: PDB file {} could not be downloaded - skipping\n',code];
	        endif
		file = token swrite ['{}/{}.ent', tmpdir,code];
		local chains = ReadPDB file;
// Delete HOH and empty chains;
		oDestroy (cat cResidues chains | cat rName cResidues chains == 'HOH');
		local m = app length cResidues chains == 0;
		oDestroy (chains | m);
		chains = chains | not m;
// only chains of type amino should be aligned
		local m1 = app add (rIsAmino cResidues chains);
		local m2 = app length cResidues chains;
		local amino_chains = chains | (m1 == m2);

// Find het groups with more than 6 atoms (discards most solvents)
		local het = cat cResidues chains | not (cat rIsAmino cResidues chains or cat rIsNucleic cResidues chains);
		het = het | app length rAtoms het > 6;
		local ahet = cat rAtoms het;

		local n = 0;
		local c;
		for c in amino_chains loop
// check wether the chain is highly homologous (> 80% identity)
			local iden = identity [csite, c];
			if (iden > 0.80) then
				n = n + 1;
				pro_Align [[csite,c], proalign_opt];
// find Het groups overlapping with the reference ligand
				prox = prox_open [1.5, aPos ahet, 0];
				ridx = second prox_find [prox, aPos alig, 1.5];
				prox_close prox;
				isite = cat uniq ridx;
aSetSelected [ahet[isite],one length isite];
				local newlig = uniq aResidue ahet[isite];
				if (length newlig < 1) then
					write [' Chain {} - %Identity= {} - No ligand found.\n',cName c, iden*100];
				else
					write [' Chain {} - %Identity= {} - {} ligand found.\n',cName c, iden*100, length newlig];
// store ligand, site and protein in MDB
					        data = [	tag['Ligand',[mol_Extract newlig]],
								tag['Site',[mol_Extract rsite]],
								tag['Chain',[mol_Extract c]],
								tag['Ligand_ID',[swrite [ '{c:}', rName newlig]]],
								tag['Chain_ID',[swrite [ '{c:}',cName c]]],
								tag['PDB_ID',[swrite [ '{c:}', code]]]
						];
     						data  = cat data;
        					db_Write [mdbkey, 0, data];
				endif
			endif;
		endloop;
		if (n < 1) then
			write ['WARNING: PDB file {} does not contain any chain homologous to the reference system - skipping\n',code];
		endif
		oDestroy chains;
        endloop
endfunction



