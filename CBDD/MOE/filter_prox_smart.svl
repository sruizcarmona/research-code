// READS AN SD FILE ENTRY BY ENTRY.
// EACH ENTRY IS CHECKED AGAINST A LIST OF FILTERS
// IF REJECTED IT GOES TO JUNK.MDB
// IF PASS ALL FILTERS GOES TO PASS.MDB
//
#set title      'Filter on Import by SMART'
#set main       'FILonIMP'
#set version    'XBSRC 2014.09.17'
#set class      'MOE:database'
//
function ScanMDLFile;
function fread_MDLRecord;
//
function FILTER_PROX_SMART []
//
// Some definitions first:
//
//local Fsmi = [
//	  ['smiles_string',max_nu_occurrences,'name (for reference only)'],
	//  ['[SX4]([OX1])([OX1])',1,'sulfonamide'], // Sulphonamide
	//  ['s1c2ncncc2cc1',1,'thienopyrimidine'], // 5 and 6 rings with S, thienopyrimidine
	//  ['o1nccc1',1,'isoxazol'], // Isoxazol
	//  ['c1cccnc1',1,'pyridine'], // Pyridine
	//  ['n12N=CC=Cc1nnc2',1,'purtri'], // Purine & triazole
	//  ['C(=O)N',1,'amide'] // Amides
	// ];

local cutoff = 2;
local ref_coord = [-2.0,0.6,-0.3];
//local ref_coord = [-2.5,1.0,-1.0]; //cacy grid
//local ref_coord = [3.5, 1.5, 0.2]; //test.sd
//
// Output are MDB files
local mdbkey_pass = db_Open ['output_pass.mdb', 'create'];
local mdbkey_fail = db_Open ['output_fail.mdb', 'create'];
db_EnsureField [mdbkey_pass,'mol','molecule'];
db_EnsureField [mdbkey_fail,'mol','molecule'];
db_EnsureField [mdbkey_fail,'smarts_match','char'];
//
// Input are all SD Files in current folder 
  //local sdfiles = cat [flist [[], '*.sd'] ];
  //local sdfiles = cat [flist [[], '*.sd'], flist [[], '*.sdf'] ];
  local sdfiles = ['unclassified.sd'];
  local sdf;

  local tmp;
  local data;
  local Fcount = 0;
  local molnum = 0;
  for sdf in sdfiles loop
    local break_flag = 0;
    write ['Processing {}.\n', sdf];
    local field_format = tag droplast ScanMDLFile [sdf,1];
    local [field,format] = untag field_format;
    for tmp in format loop
      local newformat = [];
      if (tmp <> 'molecule') then tmp = 'char'; endif // Force read as character
      newformat = append [newformat,tmp];
    endloop;
    field_format = tag [field,newformat];
    for tmp in field_format loop
      field = first tmp;
      format = second tmp;
      db_EnsureField [mdbkey_pass,field,format];
      db_EnsureField [mdbkey_fail,field,format];
    endloop;
    local fnum_input = fopenr sdf;
    local entries,v;
    while length (v = fread_MDLRecord [fnum_input, field_format]) loop
      if entries === [] then entries = 0; endif
      molnum = inc molnum;
      local [mol, data_org] = v;
//print data_org;
//print first data_org;
      mol_Create mol;
      local atoms = Atoms[];
      //for tmp in Fsmi loop
//print tmp;
          //local [smi, lim, desc] = tmp;
          //local smatch = length pack app length uniq app sort sm_MatchAtoms [smi,atoms];
          //if smatch >= lim then
	    //local matched = cat sm_MatchAtoms [smi,atoms];
	    local aa;
            for aa in atoms loop
//Calculate distance to reference point
		local a = ref_coord;
		local b = aPos aa;
		local d = sqrt (sqr (a[1]-b[1]) + sqr (a[2]-b[2]) + sqr (a[3]-b[3]) );
//print d;
		if d < cutoff then
// Save into MDB
                   //local string = swrite [ '{c:}', desc];
                   //data = [tag['mol',[mol]],tag['smarts_match',[string]],data_org];
		   data = [tag['mol',[mol]],data_org];
//print 1;
                   data  = cat data;
                   db_Write [mdbkey_fail, 0, data];//match
                  
		   oDestroy Chains[];
                   Fcount = inc Fcount;
		   break_flag= 1;
            	   break;
                endif
             endloop
	    //if break_flag=1 then 
	//	break;
	  //  endif
          //endif
      //endloop  // end Fsmi
      if length Atoms[] then
        data = [tag['mol',[mol]],data_org];
        data  = cat data;
        db_Write [mdbkey_pass, 0, data];//fail
        oDestroy Chains[];
      endif
    endloop   // end current SD file
  endloop   // end all SD files
local pass = molnum - Fcount;
write ['Processed {} entries.\n', molnum];
write ['\t{} entries matched (closer than {} A).\n', Fcount,cutoff];
write ['\t{} entries not matched.\n', pass];
endfunction
