#svl
#set title	'PlotLigInt'
#set class	'MOE'
#set version	'2014.09'
#set main	'grobdemo_Panel'

function DrawLigandInteractions;
function _Atoms;
function Draw2DStructureCTAB;

const GROB_SZ = [600, 600]; // size 
const BLANK_GROB = [
    [size: GROB_SZ, units: 'pt'],
    [	gr_text: [0, 0.5 * GROB_SZ,
	    'Selected graphics object is<br>'
	    'being generated...',
	    'sf', icolor 'blue', 14, 
	    [position: 'middlecenter', alignment: 'center']
	]
    ]
];
const NUM_GROBS = 1;

// ----------------------------------- Main ------------------------------------

local function GrobPage5;

// Open the main panel, which allows the available graphics to be examined,
// and also the entire lot to be exported in the various available formats.

function grobdemo_Panel []
    static s_grobs; // holds vector-encoded graphic objects for panel
    static s_rawgr; // analogues of above, at their native resolution

    // Background processing task function which generates all of the graphic
    // objects. Some of the examples are slow to generate.

    function GenerateGraphics wkey
    	local i;
	for i = 1, NUM_GROBS loop
	
	    	// Obtain a live graphic object key by the appropriate
		// function call.
	
	    local grkey = call peek [
	    	[  #GrobPage5],
		i
	    ];
	    write['{}',gr_data grkey];
	    s_rawgr(i) = [gr_header grkey, gr_data grkey];
	    
	    if grkey == 0 then
	    	exit twrite ['Graphic #{} failed to generate.', i];
	    endif
	    
	    	// If the graphic does not have the right size already, then
		// scale it by drawing it into a new context.
	    
	    local sz = (gr_header grkey).size;
	    if not (sz === GROB_SZ) then
	    	local grprev = grkey;
		local sw = GROB_SZ(1) / sz(1), sh = sw;
		if sz(2) * sh > GROB_SZ(2) then
		    [sw, sh] = [sw, sh] * GROB_SZ(2) / (sz(2) * sh);
		endif
		local [ox, oy] = 0.5 * (GROB_SZ - sz * [sw, sh]);
		grkey = gr_create [size: GROB_SZ, units: 'pt'];
		gr_draw [grkey, grprev, [ox, oy, sw, sh]];
	    	gr_destroy grprev;
	    endif
	    
	    	// Convert the key to vector representation, which will not
		// have issues about task lifetime, etc.
	    
	    s_grobs(i) = [gr_header grkey, gr_data grkey];
	    gr_destroy grkey;
	    
	    	// If the user is waiting for this graphic to appear, then
		// put it up.
		
	    if (WindowGetData [wkey, 'gpage']).gpage == i then
	    	WindowSetAttr [wkey, [pic: [graphics: s_grobs(i)]]];
	    endif
	endloop
    endfunction

    // Goes through all of the graphics pages, and produces a corresponding
    // output image for each one.

    function ExportGraphics dir
	write['\n\n{}\n\n',dir];
    	if dir == '' or ftype dir == 'file' then
	    Warning 'Output directory is invalid.';
	    return;
	elseif ftype dir == '' then
	    write ['Creating output directory: {}\n', dir];
	    fmkdir dir;
	endif
	
    	write 'Beginning graphics export...\n';

    	local mimetypes = gr_encode [];
	//write 'Available MIME types are:\n';
	//apt write ['   {t:-16} ({})\n', mimetypes(1), mimetypes(3)];  
	//SRC change mimetypes
	mimetypes=[['image/png'],['.png'],['PNG Image']];
	
	local i, j;
	for i = 1, NUM_GROBS loop
	    write [' == Graphic #{} ==\n', i];
	    
	    for j = 1, l_length mimetypes loop
	    	local fn = twrite ['{}/grob{}{}', dir, i, mimetypes(2)(j)];
	    	write ['    {t:-16} --> {}', mimetypes(1)(j), fn];
		fflush STDOUT;
		local t_then = clock [];
		write['{}\n{}\n\n',i,s_rawgr(i)];
		gr_fwrite [fn, s_rawgr(i), mimetypes(1)(j), [0,0,1,1]];
		local t_now = clock [];
		write ['  ({n:.5f} sec)\n', t_now - t_then];
	    endloop
	endloop
	
	write '... export complete.\n';
    endfunction

    s_grobs = rep [BLANK_GROB, NUM_GROBS];



    while wkey loop
	write['hello\n\n'];
	local [val, trig] = WindowWait wkey;
	write['bye\n\n'];
	//if trig == 'panel' then
	   // if val.panel == 'Close' then
	    	//break;
	   // elseif val.panel == 'Export' then
	    	//if YesNo
		//    'Do you wish to generate a collection of\n'
		//    'raster and vector files which represent\n'
		//    'the pages seen on this panel, using the\n'
		//    'indicated directory as the location?'
		//then
		    ExportGraphics val.dir;
		//endif
	    //endif
	//elseif trig == 'gpage' then
	//    WindowSetAttr [wkey, [pic: [graphics: s_grobs(val.gpage)]]];
	//elseif trig == 'sens' then
	//    WindowSetAttr [wkey, [pic: [sensitive: val.sens]]];
    	//endif
    endloop
    
    WindowDestroy wkey;
endfunction


// ---------------------------------- Page 5 -----------------------------------

function GrobPage5 []
    local prepush = SystemPush [];
    Open 'kk.moe';
    local chains=Chains [];
    local c3=cat cAtoms chains(3);
    local c2=cat cAtoms chains(2);
    local c1=cat cAtoms chains(1);
    local grkey = DrawLigandInteractions[[c3],[c1],[]];
    SystemPop prepush;
    //ExportGraphicsSRC[grkey];
    return grkey;
endfunction
